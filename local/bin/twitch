#!/bin/sh --
# shellcheck disable=SC3043
# twitch - gather info and play videos from twitch.tv chanels/games/etc

# requires curl jq awk pgrep(procps-ng) youtube-dl mpv sed(base-devel)

argv0=$(basename "$0")
prog=dmenu

dir=${XDG_DATA_HOME:-$HOME/share}/twitch
info=${dir:-.}/info
#shellcheck source=/home/kotto/local/share/twitch/info
#shellcheck disable=SC1091
. "$info"
user_list_file=${dir:-.}/users

base_url=https://www.twitch.tv

#shellcheck source=/home/kotto/local/cfg/bemenu/config
#shellcheck disable=SC1091
. "${XDG_CONFIG_HOME:-$HOME/local/cfg}"/dmenu/config
export IFS='	'


usage() {
  # This usage helper is used as a menu of some sort. A '\t' (tab) is used to
  # separate the menu options from the description. So, it is not possible to
  # pass a "\r" to a command as it will get the first string before a \r
  cat <<EOF
usage: $argv0 [-cmd [user/game]
 -bookmarks       	- Show channels live from the "$user_list_file bookmark file
 -game_list       	- Show the list of all Streams Categories
 -programming     	- Show the channels live from the Science & Technology category
 -chess           	- Show the channels live in the Chess category
 -user [user]     	- Show the user archived videos and the [live] if it is streaming now
 -game_name [cat] 	- Show the channels live from the <cat> category
 -update_user_list        	- Update the "$user_list_file"
 -user_bookmark_add [user]	- Add user to the "$user_list_file" bookmarks file
 -update_token            	- Update the ouath2 token.
EOF
}

get() {
  local query="$1"
  local jq_query="$2"
# shellcheck disable=SC2154
  curl -sH "Client-ID: $client_id" -H "Authorization: Bearer $bearer_token" -X GET "https://api.twitch.tv/helix/$query" | jq -r "$jq_query"
}

get_game_name() {
  get "games?id=$1" '.data[]  | .name'
}

get_game_id() {
  get "games?name=$1" '.data[]  | .id'
}

update_token() {
  url=$1
  if [ "$url" = 'update' ]; then
    url=$(xsel -ob);
  else
# shellcheck disable=SC2154
    qutebrowser "$ouath2_url$client_id&$ouath2_permissions"
  fi
  if [ -n "$url" ]; then
    token=$(printf '%s\n' "$url" | awk -F '&' '/access_token/{split($1, token); FS="#"; split(token[1], token); FS="="; split(token[2], token); print token[2]}')
    if [ -n "$token" ]; then
      tmp=$(sed -e "s/^\(bearer_token=\).*/\1'$token'/" "$info")
      if [ -n "$tmp" ]; then
        notify-send -a twitch-info -u normal 'Update' 'The access_token has been update!'
        printf '%s\n' "$tmp" > "$info"
      else
        # shellcheck disable=SC2154
        qutebrowser "$ouath2_url$client_id&$ouath2_permissions"
      fi
    fi
  fi
}

get_list() {
  local query="$1"
  local jq_query="$2"
  local cursor
  r=$(curl -sH "Client-ID: $client_id" -H "Authorization: Bearer $bearer_token" -X GET "https://api.twitch.tv/helix/$query&first=100")

  while [ -n "$r" ]; do
    if ! printf '%s\n' "$r" | jq -r "$jq_query"; then
      msg=$(printf '%s\n' "$r" | jq -r '.message')
      if [ "$msg" != 'null' ]; then
        notify-send -a twitch-fail -u critical 'Error:93 get_list' "$msg"
        if [ "$msg" = 'Invalid OAuth token' ]; then
          notify-send -a twitch-fail -u normal 'Error:95 "Invalid OAuth toekn"' 'Trying to update the token. Please, invoke "-update_token <url_returned_from_twitch_ouath2>"'
          update_token update
        fi
        exit 1
      fi
    fi

    cursor=$(printf '%s\n' "$r" | jq -r '.pagination[]')

    # NOTE(elias): Twitch changes the end of the pagination depending what
    # you are quering
    if test "$cursor" = 'IA' || test -z "$cursor"; then
      return
    fi
    # NOTE(elias): POSIX does not have regex checks like =~ in bash.
    #              Using case to make that happens
    case "$cursor" in
      *IA) return ;;
    esac

    r="$(curl -sH "Client-ID: $client_id" -H "Authorization: Bearer $bearer_token" -X GET "https://api.twitch.tv/helix/$query&first=100&after=$cursor")"
  done
}

get_games_list() {
  get_list 'games/top?' '.data[] | .name'
}

get_game_status() {
  local list="$1"

  get_list "streams?$list" '.data[] | [.viewer_count, .user_name, .game_id, .type, .language, .title] | @tsv' |
  while read -r views uname gid _ lang title; do
    game=$(get_game_name "$gid")
    if [ "$game" = "Software and Game Development" ]; then
      game="Programming"
    fi
    printf '%-6s\t%-25s\t%-20s\t[%s]\t%s\n' "$views" "$uname" "$game" "$lang" "$title"
  done
}

get_users_status() {
  read -r list
  get_list "streams?${list%&}" '.data[]  | [.user_name, .game_id, .type, .language, .title] | @tsv' |
  while read -r user game _ lang title; do
    game=$(get_game_name "$game")
    if [ "$game" = "Software and Game Development" ]; then
      game="Programming"
    fi
    printf '%-18ls\t%-20ls\t%ls\t%ls\n' "$user" "$game" "$lang" "\"$title\""
  done
}

get_user_id() {
  get "users?login=$1" '.data[] | .id'
}

get_user_id_list() {
  read -r list
  get_list "users?$list" '.data[] | .id .login'
}

get_user_name() {
  get "users?id=$1" '.data[] | .login'
}

get_user_name_list() {
  read -r list
  get "users?$list" '.data[] | .id .login'
}

get_video() {
  local id=$2
  local user=$1
  printf 'user_login=%s\n' "$user" | get_users_status |
  while read -r user game lang title; do
    printf '[live]\t%s\t%s\t%s\t%s\n' "$user" "$game" "$lang" "$title"
  done

  get_list "videos?user_id=$id" '.data[] | [.url, .published_at, .language, .title] | @tsv' |
  while read -r url pub lang title; do
    printf '%s\t%s\t%s\t%s\n' "$pub" "$lang" "$title" "$url"
  done
}

update_user_list() {
  local ulist
  while IFS=' ' read -r id name category stuff; do
    printf '%s' "$id" | grep -v '^\s*#' >/dev/null || continue
    if [ -z "$name" ]; then name=$id; fi
    #check if the user still exist
    id=$(get_user_id "$name")
    if [ -n "$id" ]; then
      printf '%-15s%-20s%-30s%s\n' "$id" "$name" "$category" "$stuff" | sed 's/\s*$//'
    else
     onegone=$(printf '%-15s %-20s %s %s\n' "$id" "$name" "$category" "$stuff")
     ulist="$list$onegone"
    fi
  done
  if [ -n "$ulist" ]; then
    printf '#The following channels are not avalible anymore.\n'
    printf '#%s\n' "$ulist"
  fi
}

add_user() {
  local user=$1
  local user_list
  user_list=$(cat "$user_list_file")

  printf '%s\n' "$user_list"
  while read -r id bookmarked_user _; do
    [ "$user" = "$bookmarked_user" ] && return 1
  done

  local id
  id=$(get_user_id "$user")
  [ -z "$id" ] && return 1

  user=$(printf '%-15s%-20s\n' "$id" "$user")
  printf '%s\n' "$user_list" "$user" | tee "$user_list_file"
}

menu() {
  local p
  p=$(printf '%.20s: ' "$1")
  shift
  local title=$1
  shift

  "$prog" --header="$title" --prompt="$p" --tabstop=2 --no-clear "$@"
}

trim(){
  printf '%s' "$1" | sed 's/ *$//' | sed 's/ *//'
}

run() {
  opt="-menu"
  if [ -n "$1" ]; then
    opt=$1
    shift
  fi
  case "$opt" in
    -game_list)
      name="$*"
      if [ -n "$name" ]; then
        title="$name"
        name=$(printf '%s\n' "$name" | sed -e 's/ /%20/g')
        name=$(printf '%s\n' "$name" | sed -e 's/&/%26/g')
        gid=$(get_game_id "$name")

        get_game_status "game_id=$gid" | menu 'game_list' "$title" |
        while read -r _ user game lang title; do
          mpv-run "$base_url/$user" &
          disown
          exit 0
        done
      else
        get_games_list | menu 'game_list' 'Available games' | while read -r game; do
        if [ -n "$game" ]; then
          run -game_list "$game"
        fi
      done
      fi
    ;;
    -programming)
      #Science & Technology  509670
      #Software and Game Development 1469308723
      get_game_status 'game_id=1469308723' | menu 'programming' 'Programming' |
      while read -r _ user game lang title; do
        mpv-run "$base_url/$user"
      done
    ;;
    -chess)
      #Chess 743
      get_game_status 'game_id=743' | menu 'chess' 'Chess' |
      while read -r _ user game lang title; do
        mpv-run "$base_url/$user"
      done
    ;;
    -bookmarks)
      awk '{printf "user_login=%s&", $2}' "$user_list_file"| get_users_status | menu 'bookmarks' 'List of users' |
      while read -r user game lang title; do
      if [ -n "$user" ]; then
        mpv-run "$base_url/$user"
      fi
      done
    ;;
    -menu)
      opt=$(usage | awk '!/^usage/' | menu 'menu' 'Twitch commands: ')
      opt=$(printf '%s\n' "$opt" | awk '/^ [-].*/{print $1}')
      if [ -n "$opt" ]; then
        run "$opt" 
      fi
    ;;
    -user_id)
      get_user_id "$1"
    ;;
    -user)
      id=$1
      user=$2
      if [ -n "$id" ]; then
        if [ -z "$user" ]; then
          user=$id
          id=$(get_user_id "$user")
        fi

        get_video "$user" "$id" | menu 'user' "$user videos:" |
        while read -r pub lang title url; do
          game="???"
          if [ "$pub" = "[live]" ]; then
            game=$lang
            lang=$title
            title=$url
            url="$base_url/$user"
          fi
          [ -n "$url" ] && mpv-run "$url"
        done
      else
        menu 'user' 'Bookmarks' --print-query < "$user_list_file" |
        while IFS=' ' read -r id user _; do
          [ -n "$id" ] && run  '-user' "$id" "$user"
        done
      fi
    ;;
    -user_bookmark_add)
      user=$1
      if [ -n "$user" ]; then
        add_user "$user"
      else
        # if no username is passed, then try to find from any `mpv` command
        # that has 'www.twitch.tv/username.
        pgrep --list-full --exact mpv | awk 'BEGIN { FS = "/" } /www\.twitch\.tv/ && $(NF-1) !~ /videos/{print $(NF)}' |
        menu 'user_bookmark_add' 'Add user to bookmarks' --print-query | while read -r user; do
        [ -n "$user" ] && run  '-user_bookmark_add' "${user%% *}"
      done
      fi
    ;;
    -game_id)
      game=$(printf '%s' "$*" | sed 's/ /%20/g')
      get_game_id "$game"
    ;;
  -game_name)
      get_game_name "$1"
    ;;
    -update_user_list)
      updated=$(update_user_list < "$user_list_file") && printf '%s\n' "$updated" | tee "$user_list_file"
    ;;
    help|--help|-h|-help)
      usage
    ;;
    -update_token)
      # NOTE(elias) for now this will need to be done manually.
      update_token "$@"
    ;;
    *)
      run  -menu
    ;;
  esac
}
run "$@"
