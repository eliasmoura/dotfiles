#!/bin/sh --
# shellcheck disable=SC3043
# Open whatever video either local or remote using mpv and youtube-dl
# requires awk pgrep(procps-ng) youtube-dl mpv cat(coreutils) ffmpeg

argv0=$(basename "$0")
prog=dmenu
#shellcheck source=/home/kotto/local/cfg/bemenu/config
#shellcheck disable=SC1091
. "${XDG_CONFIG_HOME:-$HOME/local/cfg}"/dmenu/config
export IFS='	'

usage() {
 cat <<EOF
usage: $argv0 [(resolution/format)|url|-h]
  resolution/format is either 1080p/720p/360p
  url is the url to the video. If the url is not passed in the program args, it will try to it from the clipboard.
  -h|--help show this help
EOF
}

get_formats (){
    jq -r '.formats[] | [ .format_id, .ext, .fps, .tbr, .format ] | @tsv' |
    while read -r format_id ext fps br resolution; do
      if [ -z "$resolution" ]; then #audio only
        fps=""
        br=""
        resolution="audio_only"
      else
        br=$(printf '%s' "$br" | sed 's/\..*/K/')
        br="$br"B
      fi
      printf '%-16s\t%-10s\t%-3s\t%10s\t%10s\n' "$format_id" "$ext" "$fps" "$br" "${resolution#* -}"
    done
}

play() {
  local url=$1
  local format=$2
  local duration=$3
  local res=$4
  local title=$5

  if [ -z "$format" ] || [ "$format" = "no" ]; then
    return
  fi

  if [ "$format" != "yes" ]; then
    [ -z "$res" ] && res=$format
    format="--ytdl-format=$format"
  else
    format=""
  fi

  notify-send -u low -a mpv "PLAYING" "$title\nDuration: $duration\t Res:$res\nURL: $url"
  mpv --really-quiet --keep-open --pause --ytdl-raw-options=yes-playlist= --force-window=yes "$format" -- "$url" 2>&1 ||
    notify-send -u critical -a mpv-fail "STOPED" "mpv cound't open: $url"
}

get_info(){
  jq -r '[.extractor, .uploader, .uploader_id, .is_live, .duration, .title, .description ] | @tsv'
}

menu() {
  local prompt=
  prompt=$(printf '%s: ' "$1")
  shift

  local title
  title=$(printf 'Video formats for: %s' "$1")
  shift
  # set -f disable shell glob expansion
  # shellcheck disable=2086
  "$prog" --header="$title" --prompt="$p" --tabstop=2 "$@"
}

best_chosen() {
  local best_id=""
  local best_br=0
  local res
  while read -r id br r; do
    br=${br%B}
    br=${br%K}
    br=$((br))
    if [ -n "$br" ] && [ $br -gt $best_br ];then
      best_id=$id
      best_br=$br
      res=$r
    fi
  done
  [ -n "$best_id" ] && printf '%s\t%s' "$best_id" "$res"
}

choose_format() {
  local lformat=$1
  local head=$2
  c_format=$(printf '%s\n' "$lformat" | menu 'Format' "$head")

  local lc_audio
  lc_audio=$(printf '%s\n' "$c_format" | awk '/audio only/{printf("%s\t%s\t%s\n", $1, $4, $5)}')
  local b_audio
  b_audio=$(printf '%s\n' "$lc_audio" | best_chosen)

  local lc_video
  lc_video=$(printf '%s\n' "$c_format" | awk '!/audio only/{printf("%s\t%s\t%s\n", $1, $4, $5)}')
  local b_video
  b_video=$(printf '%s\n' "$lc_video" | best_chosen)

  if [ -n "$b_audio" ] && [ -n "$b_video" ]; then
    printf '%s+%s\t%s %s' "${b_video%	*}" "${b_audio%	*}" "${b_video#*	}" "${b_audio#*	}"
  else
    if [ -n "$b_audio" ]; then
      printf '%s\t%s' "${b_audio%	*}" "${b_audio#*	}"
    fi
    if [ -n "$b_video" ]; then
      printf '%s\t%s' "${b_video%	*}" "${b_video#*	}"
    fi
  fi
}

if ! [ -f "$1" ]; then
  while [ -n "$1" ]; do
    case "$1" in
      1080)
        format="303+251/299+140/248+140/248+251/247+140/247+251/137+140/136+140/22/43/18/1080p/720p/420p/0/best"
        res=1080p
        ;;
      720)
        format="136+140/137+140/247+140/247+251/22/43/18/720p/420p/0/best"
        res=720p
        ;;
      360)
        format="43/18"
        res=360p
        ;;
      *.*)
        url="$1"
        ;;
      -f)
        shit
        format=$1
        ;;
      --)
        shift
        url="$*"
        shift $# # Make sure your don't have any args left after this.
        break
        ;;
      -h|--help|*)
       usage
       ;;
    esac
    shift
  done

  if ! [ "$url" ]; then
    url=$(xsel --clipboard)
  fi
  if ! [ "$url" ]; then
    notify-send -u normal -a mpv-fail 'URL' 'No "url" provided make sure you have copied it to the clipboard'
    return 1
  fi

  notify-send -u low -a mpv-run 'Info' "Getting info for $url"
  json=$(youtube-dl --dump-json -- "$url")
  printf '%s' "$json" | get_info |
    while read -r extractor channel_name channel_id is_live duration title description; do
    title=${title:-$description}

    if [ -z "$is_live" ] && [ -n "$duration" ]; then
      sec=":$((duration % 60))"
      min=$((duration / 60))
      if [ -n "$min" ] && [ $min -gt 60 ]; then
        hour=$((min / 60))
        min=":$((min % 60))"
      fi
      if [ -n "$hour" ] && [ $hour -gt 24 ]; then
        day=$((hour / 24))
        hour=":$((hour % 24))"
      fi
      duration=$(printf '%s%s%s%s' "$day" "$hour" "$min" "$sec")
    else
      duration="live?"
    fi

    if [ -z "$format" ]; then
      formats=$(printf '%s' "$json" | get_formats)
      if [ -z "$formats" ]; then
        head="No video format found to: [$duration] \"$title\" (url: $url). Play it anyway?"
        formats=$(printf '%s\n' "yes" "no")
      else
        title=$(printf '%.60s\n' "$title")
        head=$(printf '[%s] %s%s' "$duration" "${channel_name:-$channel_id}: " "$title")
      fi
      format=$(choose_format "$formats" "$head")
      res=${format#*	}
      format=${format%	*}
    fi

    logdir="${XDG_RUNTIME_DIR:-/tmp}/mpv/$extractor"
    mkdir -p "$logdir"
    logfile="$logdir/$channel_id".log
    play "$url" "$format" "$duration" "$res" "$title" "$extractor" >> "$logfile" 2>&1 &
  # shellcheck disable=SC3044
    disown
  done
else
  format=$(ffmpeg -i "$1" 2>&1 | awk '/Stream #0:0/{print $10}')
  format=${format%,}
  url="$1"
  title="${url#*/}"
  channel="local:$title"
  duration=$(ffmpeg -i "$1" 2>&1 | awk '/Metadata.{getline} /Duration/{print $2}')
  duration=${duration%,}
  extractor="ffmpeg"

  logdir="${XDG_RUNTIME_DIR:-/tmp}/mpv/$extractor"
  mkdir -p "$logdir"
  logfile="$logdir/$channel.log"
  play "$url" "$format" "$duration" "$format" "$title" "$extractor" >> "$logfile" 2>&1 &
  # shellcheck disable=SC3044
  disown
fi

