#!/usr/bin/env bash

ex=dmenu
# shellcheck source=/home/kotto/local/cfg/bemenu/conf
#source "$HOME/local/cfg/dmenu/conf"
switches=("--really-quiet" "--keep-open" "--pause" "--force-window=yes" "--ytdl-raw-options=yes-playlist=") #show the window even if it's just audio
title=""
formats=""
format=""
url=""

# prefix=(--prefix 'â‡’')
# bprompt=(--prompt 'Run: ')
num_lines=(-l 25)
# colors=(--hb '#ffffff' --ff '#007fce' --tf '#d2691e')
opts=(${prefix[*]} ${bprompt[*]} ${num_lines[*]} ${colors[*]} -i)

mpv_dir=${XDG_RUNTIME_DIR:-/tmp}/mpv
if ! [ -d "$mpv_dir" ]; then
  mkdir -p "$mpv_dir"
fi

get_formats (){
  count=0
  while read -r f
  do
    if [[ $f =~ ^[0-9] ]]
    then
      formats[count]="$f";
      ((count = count + 1))
    fi
  done <<< "$(youtube-dl --no-playlist --list-formats "$1" 2> /dev/null)"
}

get_title_duration () {
  counter=1
  # XXX: I would like to do format,title and duration all at one, but youtube-dl doesn't allow that.
  # I don't want to do two queries as I have a shity internet
  # youtube-dl don't care the order of the switches
  # and it return the title first
  opt=(--get-title --get-duration)
  if [[ $1 =~ http[s]?://www.youtube.com/playlist\?.* ]] || [[ $1 =~ http[s]?://www.youtube.com/watch.*list=.* ]]; then
	opt=("${opt[@]}" --no-playlist)
  else
    echo not playlist
  fi
  while read -r line; do
    if [ $counter -eq 1 ]; then
      title=$line
    else
      duration=$line
    fi
    let counter=counter+1
  done <<< "$(youtube-dl "${opt[@]}" "$1")"
}

choose_format () {
  if ! [ "${formats[*]}" ]; then
    opts=(${opts[*]} -p "No video format found to: [$duration] \"$title\" (url: $input). Play it anyway?")
    formats=(yes no)
  else
    opts=(${opts[*]} -p "PLAY: [$duration] $title")
  fi
  format=$(printf "%s\n" "${formats[@]}" | awk '!/^\[|^format code/' | $ex "${opts[@]}" | awk '{print $1}')
  if [ "$format" ] && ! [ "$format" = "no" ]; then
    return 0;
  fi
  exit 1
}

save_video() {
  opts=("${opts[@]}" -p "Save video $title ?")
  save=$(find "$HOME/videos/" -type d | $ex "${opts[@]}")
  if [ "$save" ]; then
    ! [ -d "$save" ] && mkdir -p "$save"
    #if [[ $? ]]; then
      #notify-send "File \"${file##*/}\" saved in \"$save\""
    #else
      #notify-send -u critical "Cound'n save file \"$file\"!"
    #fi
  else
    return 0
  fi
}

watch (){
  notify-send -a mpv "PLAYING" "<span fgcolor='white'>$title</span>\nDuration: <span fgcolor='white'>$duration</span>\t Format:<span fgcolor='white'>$format</span>\nURL: <span fgcolor='white'>$url</span>"
  switches=("${switches[@]}"  "--input-ipc-server=$mpv_dir/$f")
  if [[ "$format" != "yes" ]]; then
    switches=("${switches[@]}" "--ytdl-format=$format")
  fi
  printf "HERE: %s\n" "${switches[@]}" "$format"
  mpv "${switches[@]}" "$1"
  s="$?"
  rm "$mpv_dir/$f"
  if ! [ $s -eq 0 ]; then
    notify-send -a mpv-fail "STOPED" "<span fgcolor='white'>mpv cound't open: $url</span>"
    return 1
  fi
  save_video "$s"
  return "$s"
}

if ! [ -f "$1" ]; then
  case "$1" in
    720)
      format="137+140/248+140/248+251/247+140/247+251/22/43/18/1080p/720p/420p/0/best"
      ;;
    360)
      format="43/18"
      ;;
    *)
      url="$1"
      ;;
  esac

  if ! [ "$url" ]
  then
    url=$(xsel --clipboard)
  fi
  ! [ "$url" ] && return 1
  notify-send -a mpv " " "<span fgcolor='white'>Getting info for $url</span>"
  get_title_duration "$url"
  if ! [ "$title" ]
  then
    title="$url"
  fi

  if ! [ "$format" ]; then
    get_formats "$url"
    while pgrep dmenu &>/dev/null; do
      sleep 1
    done
    choose_format "$url"
  fi
  f=${title}
  f=${f//\//|}
  f=${f// /_}

else
  title="${1##*/}"
  watch "$1"
  return 0
fi

watch "$url"
exit 0
