* Emacs' configuration

This config is build on top of the Archlinux's emacs version. 

** paths
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/plugin/use-package")
  (add-to-list 'load-path "~/.emacs.d/plugin")
  (add-to-list 'load-path "~/.emacs.d/lisp")
#+END_SRC

** Package Management
I use "use-package" to load the packages I want. All the version and
download of the packages are done through git

#+BEGIN_SRC emacs-lisp
  (eval-when-compile (require 'use-package))
  ;;(require 'diminish)
  (require 'bind-key)
#+END_SRC

** Cosmetics
Removing all unnecessary stuff and setting up a cool color scheme and mode-line

#+BEGIN_SRC emacs-lisp
  (server-start)
  ;;;Show matching brackets
  (show-paren-mode 1)
  ;;; auto close brackets
  (electric-pair-mode 1)
  ;;;update files when changed
  (global-auto-revert-mode 1)
  ;;;hilight the current line
  (global-hl-line-mode 1)
  ;;;break the lines
  (setq-default truncate-lines nil)
  (menu-bar-mode -1)
  (when (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))
  (when (fboundp 'scroll-bar-mode)
    (scroll-bar-mode -1))
  (blink-cursor-mode -1)
  (mouse-wheel-mode -1)
  (tooltip-mode -1)
  (global-linum-mode t)
  (column-number-mode t)
  (fringe-mode 0)
  (setq initial-scratch-message "")
  (setq inhibit-startup-message t)
  (server-start)
  (use-package whitespace
    :init
    (setq whitespace-style '(face empty tabs lines-tail trailing))
    :config
    (global-whitespace-mode t))
  (setq org-export-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  (set-charset-priority 'unicode)
  (setq default-process-coding-system '(utf-8-unix . utf-8-unix))
  (setq-default indent-tabs-mode nil)
  (progn
    (setq x-select-enable-clipboard t
          x-select-enable-primary t
          save-interprogram-paste-before-kill t
          apropos-do-all t
          mouse-yank-at-point t
          require-final-newline t
          visible-bell t
          load-prefer-newer t
          ediff-window-setup-function 'ediff-setup-windows-plain
          save-place-file (concat user-emacs-directory "places")
          backup-directory-alist `(("." . ,(concat user-emacs-directory
                                                   "backups")))))
#+END_SRC

** Key binds
Most of the key binds are set when the packages are loaded through use-package

#+BEGIN_SRC emacs-lisp
  ;;(bind-key "C-c n" 'insert-user-timestamp)
  (bind-key "C-c o" 'customize-option)
  (bind-key "C-c O" 'customize-group)
  (bind-key "C-c F" 'customize-face)

  (bind-key "C-c q" 'fill-region)
  (bind-key "C-c u" 'rename-uniquely)
#+END_SRC

** Packages required by other packages

#+BEGIN_SRC emacs-lisp
  (use-package let-alist :defer t :load-path "~/.emacs.d/plugin/let-alist")
  (use-package dash :defer t :load-path "~/.emacs.d/plugin/dash")
  (use-package ter :defer t :load-path "~/emacs.d/plugin/tern")
  (use-package popwin :defer t :load-path "~/.emacs.d/plugin/popwin-el")
  ;;(use-package popup :defer t :load-path "~/.emacs.d/plugin/popup-el")
  (use-package s :defer t :load-path "~/.emacs.d/plugin/s")
#+END_SRC

** Theme
#+BEGIN_SRC emacs-lisp
  (use-package base16-atelierseaside-dark-theme
    :load-path "~/.emacs.d/plugin/base16-themes/"
    :config
    (load-theme 'base16-atelierseaside-dark-theme t))

  (use-package smart-mode-line
    :load-path "~/.emacs.d/plugin/smart-mode-line"
    :init (setq sml/no-confirm-load-theme t)
    :config
    (use-package rich-minority :load-path "~/.emacs.d/plugin/rich-minority")
    (sml/setup)
    (setq sml/theme 'dark))
#+END_SRC

** Org-mode

#+BEGIN_SRC emacs-lisp
  (use-package org
    :load-path ("~/.emacs.d/plugin/org-mode" "~/.emacs.d/plugin/org-mode/contrib/lisp")
    :bind
    (;("M-c"   . jump-to-org-agenda)
     ("M-m"   . org-smart-capture)
     ("C-c c" . org-capture)
     ("M-M"   . org-inline-note)
     ("C-c a" . org-agenda)
     ("C-c S" . org-store-link)
     ("C-c l" . org-insert-link)
     ("C-. n" . org-velocity-read))
    :config
    (setq org-default-directory "~/writings/org")
    (setq org-directory "~/writings/org")
    (setq org-startup-folded nil)
    (defvar my/org-basic-task-template "* TODO %^{Task}
    :PROPERTIES:
    :Effort: %^{effort|1:00|0:05|0:15|0:30|2:00|4:00}
    :END:
    Captured %<%Y-%m-%d %H:%M>
    %?

    %a

    %i
    " "Basic task data")
    (setq org-capture-templates
          `(("t" "Tasks" entry
             (file+headline "~/writings/org/organizer.org" "Tasks")
             ,my/org-basic-task-template)
            ("T" "Quick task" entry
             (file+headline "~/writings/org/organizer.org" "Tasks")
             "* TODO %^{Task}\nSCHEDULED: %t\n"
             :immediate-finish t)))

    (use-package org-agenda
      :config
      (setq org-agenda-files (quote ("~/writings/org/base.org"
                                     "~/writings/org/books.org"))))
    (setq org-default-notes-file (concat org-directory "/notes.org"))
    ;; (use-package org-smart-capture)
    (use-package org-crypt)
    (use-package org-bbdb)
    ;; (use-package org-devonthink)
    (use-package org-mac-link)
    ;; (require 'org-magit)
    (use-package org-velocity)
    (custom-set-faces
     '(org-mode-line-clock ((t (:foreground "red" :box (:line-width -1 :style released-button)))) t))
    (setq org-src-fontify-natively t)
    (setq org-log-done 'time)
    (setq org-log-done 'note)
    (add-hook 'org-mode-hook 'turn-on-flyspell 'append)
    (put 'upcase-region 'disabled nil)
    (custom-set-faces
     ;; custom-set-faces was added by Custom.
     ;; If you edit it by hand, you could mess it up, so be careful.
     ;; Your init file should contain only one such instance.
     ;; If there is more than one, they won't work right.
     '(org-mode-line-clock ((t (:foreground "red" :box (:line-width -1 :style released-button)))) t))
    (use-package org-bullets
      :load-path "~/.emacs.d/plugin/org-bullets"
      :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
    (setcar (nthcdr 2 org-emphasis-regexp-components) " \t\r\n\"'")
    (org-set-emph-re 'org-emphasis-regexp-components org-emphasis-regexp-components)
    (use-package org-journal
      :load-path "~/.emacs.d/plugin/org-journal"
      :config (setq org-journal-dir "~/writings/diary/"))
    ;; (add-hook 'org-mode-hook #'(lambda () (yas-minor-mode 1)))
    (setq org-todo-keywords
          '((sequence "TODO" "|" "DONE")
            (sequence "REPORT" "BUG" "KNOWNCAUSE" "|" "FIXED")
            (sequence "|" "CANCELED")))
    (setq org-cycle-separator-lines 0)
    (setq org-id-method (quote uuidgen)))
#+END_SRC

** Evil-mode

#+BEGIN_SRC emacs-lisp
  (use-package evil :load-path "~/.emacs.d/plugin/evil-mode"
    :init
    (require 'evil)
    :config
    (define-key evil-normal-state-map ";" 'command)
    (evil-mode 1)
    (use-package evil-leader
      :load-path "~/.emacs.d/plugin/evil-leader/")
    (use-package evil-org
      :load-path "~/.emacs.d/plugin/evil-org-mode"
      :init (require 'evil-org)
      :config
      (define-key evil-motion-state-map " " nil)
      (define-key evil-motion-state-map (kbd "SPC c u") 'org-timestamp-up)
      (define-key evil-motion-state-map (kbd "SPC c d") 'org-timestamp-down)
      (define-key evil-motion-state-map (kbd "SPC c i") 'org-clock-in)
      (define-key evil-motion-state-map (kbd "SPC c o") 'org-clock-out)
      )
    (use-package evil-surround
      :load-path "~/.emacs.d/plugin/evil-surround"
      :init (require 'evil-surround)
      :config
      (global-evil-surround-mode 1))
    (defface my-evil-state-emacs-face
      '((t (:background "Orange" :foreground "White")))
      "Evil Mode Emacs State Face")

    (defface my-evil-state-insert-face
      '((t (:background "DodgerBlue1" :foreground "White")))
      "Evil Mode Insert State Face")

    (defface my-evil-state-normal-face
      '((t (:background "Red" :foreground "White")))
      "Evil Mode Normal Stace Face")

    (defun evil-generate-mode-line-tag (&optional state)
      "Generate the evil mode-line tag for STATE."
      (let ((tag (evil-state-property state :tag t)))
        ;; prepare mode-line: add tooltip
        (if (stringp tag)
            (propertize tag
                        'face (cond
                               ((string= "normal" state)
                                'my-evil-state-normal-face)
                               ((string= "insert" state)
                                'my-evil-state-insert-face)
                               ((string= "emacs" state)
                                'my-evil-state-emacs-face))
                        'help-echo (evil-state-property state :name)
                        'mouse-face 'mode-line-highlight)
          tag)))
    (cl-loop for (mode . state) in '((inferior-emacs-lisp-mode     . emacs)
                                     ;;(org-mode                     . emacs)
                                     (pylookup-mode                . emacs)
                                     (comint-mode                  . emacs)
                                     (ebib-entry-mode              . emacs)
                                     (ebib-index-mode              . emacs)
                                     (ebib-log-mode                . emacs)
                                     (elfeed-show-mode             . emacs)
                                     (elfeed-search-mode           . emacs)
                                     (gtags-select-mode            . emacs)
                                     (shell-mode                   . emacs)
                                     (term-mode                    . emacs)
                                     (bc-menu-mode                 . emacs)
                                     (magit-branch-manager-mode    . emacs)
                                     (semantic-symref-results-mode . emacs)
                                     (rdictcc-buffer-mode          . emacs)
                                     (erc-mode                     . normal))
             do (evil-set-initial-state mode state))
    (with-eval-after-load 'evil-vars
      (setq evil-want-C-w-in-emacs-state t))
    (with-eval-after-load 'evil-maps
      (define-key evil-insert-state-map (kbd "C-w") 'evil-window-map))
    (with-eval-after-load 'evil-maps
      ;; (define-key evil-motion-state-map (kbd "SPC") nil)
      ;; (define-key evil-visual-state-map (kbd "SPC") nil)
      (define-key evil-motion-state-map (kbd "RET") nil)
      (define-key evil-visual-state-map (kbd "RET") nil)
      (define-key evil-motion-state-map (kbd "TAB") nil)
      (define-key evil-visual-state-map (kbd "TAB") nil))
    (with-eval-after-load 'evil-maps
      (define-key evil-motion-state-map (kbd ";") 'evil-ex)
      (define-key evil-normal-state-map (kbd ";") 'evil-ex)
      (define-key evil-visual-state-map (kbd ";") 'evil-ex)))
#+END_SRC

** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :load-path "~/.emacs.d/plugin/magit"
    :bind (("C-x g" . magit-status)
           ("C-x G" . magit-status-with-prefix))
    :preface
    (defun magit-monitor (&optional no-display)
      "Start git-monitor in the current directory."
      (interactive)
      (when (string-match "\\*magit: \\(.+?\\)\\*" (buffer-name))
        (let ((name (format "*git-monitor: %s*"
                            (match-string 1 (buffer-name)))))
          (or (get-buffer name)
              (let ((buf (get-buffer-create name)))
                (ignore-errors
                  (start-process "*git-monitor*" buf "git-monitor"
                                 "-d" (expand-file-name default-directory)))
                buf)))))

    (defun magit-status-with-prefix ()
      (interactive)
      (let ((current-prefix-arg '(4)))
        (call-interactively 'magit-status)))

    (defun lusty-magit-status (dir &optional switch-function)
      (interactive (list (if current-prefix-arg
                             (lusty-read-directory)
                           (or (magit-get-top-dir)
                               (lusty-read-directory)))))
      (magit-status-internal dir switch-function))

    (defun eshell/git (&rest args)
      (cond
       ((or (null args)
            (and (string= (car args) "status") (null (cdr args))))
        (magit-status-internal default-directory))
       ((and (string= (car args) "log") (null (cdr args)))
        (magit-log "HEAD"))
       (t (throw 'eshell-replace-command
                 (eshell-parse-command
                  "*git"
                  (eshell-stringify-list (eshell-flatten-list args)))))))

    :init
    (add-hook 'magit-mode-hook 'hl-line-mode)
    :config
    (setenv "GIT_PAGER" "")
    (use-package magit-backup
      :commands magit-backup-mode
      :config
      (magit-backup-mode -1))
    (use-package magit-commit
      :config
      (remove-hook 'server-switch-hook 'magit-commit-diff))
    (unbind-key "M-h" magit-mode-map)
    (unbind-key "M-s" magit-mode-map)
    (unbind-key "M-m" magit-mode-map)
    ;; (bind-key "M-H" #'magit-show-level-2-all magit-mode-map)
    ;; (bind-key "M-S" #'magit-show-level-4-all magit-mode-map)
    (bind-key "U" #'magit-unstage-all magit-mode-map)
    (add-hook 'magit-log-edit-mode-hook
              #'(lambda ()
                  (set-fill-column 72)
                  (flyspell-mode)))
    (add-hook 'magit-status-mode-hook #'(lambda () (magit-monitor t))))
#+END_SRC

** Moving around

#+BEGIN_SRC emacs-lisp
  (use-package ace-jump-mode
    :load-path "~/.emacs.d/plugin/ace-jump-mode"
    :bind ("M-h" . ace-jump-mode)
    :config
    (setq ace-jump-mode-submode-list
          '(ace-jump-char-mode
            ace-jump-word-mode
            ace-jump-line-mode)))
#+END_SRC

** Flycheck

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :init (add-hook 'after-init-hook #'global-flycheck-mode)

    :load-path "~/.emacs.d/plugin/flycheck"
    :config
    ;; (add-hook 'flycheck-mode-hook #'flycheck-irony-setup)
    )
  (use-package flyspell
    :bind (("C-c i b" . flyspell-buffer)
           ("C-c i f" . flyspell-mode))
    :init
    (use-package ispell
      :bind (("C-c i c" . ispell-comments-and-strings)
             ("C-c i d" . ispell-change-dictionary)
             ("C-c i k" . ispell-kill-ispell)
             ("C-c i m" . ispell-message)
             ("C-c i r" . ispell-region)))
    :config
    (setq ispell-list-command "--list")
    (let ((langs '("american" "pt_BR" "russian")))
      (setq lang-ring (make-ring (length langs)))
      (dolist (elem langs) (ring-insert lang-ring elem)))
    (defun cycle-ispell-languages ()
      (interactive)
      (let ((lang (ring-ref lang-ring -1)))
        (ring-insert lang-ring lang)
        (ispell-change-dictionary lang)))
    (global-set-key [f6] 'cycle-ispell-languages)
    (unbind-key "C-." flyspell-mode-map))
#+END_SRC

** shorcuts helper
   :PROPERTIES:
   :ORDERED:  t
   :END:

#+BEGIN_SRC emacs-lisp
  (use-package guide-key
    :load-path "~/.emacs.d/plugin/guide-key"
    :diminish guide-key-mode
    :commands guide-key-mode
    :defer 10
    :config
    (setq guide-key/guide-key-sequence
          '("C-."
            "C-h e"
            "C-x 4"
            "C-x 5"
            "C-x r"
            "M-o"
            "C-x"
            "C-c"
            "C-c p"
            "M-s"))
    (guide-key-mode 1))
#+END_SRC

** Ivy mode
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :load-path "~/.emacs.d/plugin/swiper"
    :config
    (use-package swiper :load-path "~/.emacs.d/plugin/swiper/")
    (require 'counsel)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-height 10)
    (setq ivy-count-format "(%d/%d) ")
    (global-set-key "\C-s" 'swiper)
    (global-set-key (kbd "C-c C-r") 'ivy-resume)
    (global-set-key (kbd "<f6>") 'ivy-resume)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "C-h f") 'counsel-describe-function)
    (global-set-key (kbd "C-h v") 'counsel-describe-variable)
    (global-set-key (kbd "C-h l") 'counsel-load-library)
    (global-set-key (kbd "C-h i") 'counsel-info-lookup-symbol)
    (global-set-key (kbd "C-h u") 'counsel-unicode-char)
    (global-set-key (kbd "C-c g") 'counsel-git)
    (global-set-key (kbd "C-c j") 'counsel-git-grep)
    (global-set-key (kbd "C-c k") 'counsel-ag)
    (global-set-key (kbd "C-x l") 'counsel-locate)
    (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
    (ivy-mode 1))
#+END_SRC

** Web dev

#+BEGIN_SRC emacs-lisp
  (use-package json-mode
    :load-path ("~/.emacs.d/plugin/json-mode")
    :mode "\\.json\\'"
    :config
    (use-package jshint-mode :load-path "~/emcas.d/plugin/jshint-mode"
      :init (add-hook 'js-mode-hook 'jshint-mode)))

  (use-package js2-mode
    :load-path "~/.emacs.d/plugin/js2-mode"
    :mode "\\.js\\'"
    :config
    (use-package jshint-mode :load-path "~/emcas.d/plugin/jshint-mode"
      :init (add-hook 'js-mode-hook 'jshint-mode)))
  (use-package web-mode 
    :load-path "~/.emacs.d/plugin/web-mode"
    :mode ("\\.js\\'" "\\.html\\'" "\\.css\\'" "\\.json\\'")
    :config
    (defun my-web-mode-hook ()
     "Hooks for Web mode."
     (setq web-mode-markup-indent-offset 2))
     (add-hook 'web-mode-hook  'my-web-mode-hook))
  (require 'saveplace)
  (setq-default save-place t)

  (autoload 'indent-according-to-mode "indent" nil t)
  (autoload 'hippie-expand "hippie-exp" nil t)

  (defun smart-tab (&optional arg)
    (interactive "P")
    (cond
     ((looking-back "^[-+* \t]*")
      (if (eq major-mode 'org-mode)
          (org-cycle arg)
        (indent-according-to-mode)))
     (t
      ;; Hippie also expands yasnippets, due to `yas-hippie-try-expand' in
      ;; `hippie-expand-try-functions-list'.
      (hippie-expand arg))))

    (use-package pkgbuild-mode
      :load-path "~/.emacs.d/plugin/pkgbuild-mode"
      :config
      (setq auto-mode-alist (append '(("/PKGBUILD$" . pkgbuild-mode))
                                    auto-mode-alist)))
  (use-package markdown-mode
    :load-path "~/.emacs.d/plugin/markdown-mode"
    :mode (("\\`README\\.md\\'" . gfm-mode)
           ("\\.md\\'"          . markdown-mode)
           ("\\.markdown\\'"    . markdown-mode)))
#+END_SRC

** Backup

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/local/backups")))
  (setq delete-old-versions -1)
  (setq version-control t)
  (setq vc-make-backup-files t)
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/local/auto-save-list/" t)))

  (setq savehist-file "~/.emacs.d/local/savehist")
  (savehist-mode 1)
  (setq history-length t)
  (setq history-delete-duplicates t)
  (setq savehist-save-minibuffer-history 1)
  (setq savehist-additional-variables
        '(kill-ring
          search-ring
          regexp-search-ring))
#+END_SRC

** finic

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** frequetly accesse files

#+BEGIN_SRC emacs-lisp
  (defvar my/refile-map (make-sparse-keymap))

  (defmacro my/defshortcut (key file)
    `(progn
       (set-register ,key (cons 'file ,file))
       (define-key my/refile-map
         (char-to-string ,key)
         (lambda (prefix)
           (interactive "p")
           (let ((org-refile-targets '(((,file) :maxlevel . 6)))
                 (current-prefix-arg (or current-prefix-arg '(4))))
             (call-interactively 'org-refile))))))

  (my/defshortcut ?i "~/.emacs.d/config.org")
  (my/defshortcut ?r "~/learn/Concurso/oficila_chancelaria/all.org")
  (my/defshortcut ?o "~/writings/org/base.org")
  (my/defshortcut ?s "~/personal/sewing.org")
  (my/defshortcut ?b "~/personal/business.org")
  (my/defshortcut ?B "~/writings/org/books.org")
  (my/defshortcut ?e "~/code/emacs-notes/tasks.org")
  (my/defshortcut ?w "~/Dropbox/public/sharing/index.org")
  (my/defshortcut ?W "~/Dropbox/public/sharing/blog.org")
  (my/defshortcut ?j "~/personal/journal.org")
  (my/defshortcut ?I "~/Dropbox/Inbox")
  (my/defshortcut ?g "~/sachac.github.io/evil-plans/index.org")
  (my/defshortcut ?c "~/code/dev/elisp-course.org")
  (my/defshortcut ?C "~/personal/calendar.org")
  (my/defshortcut ?l "~/dropbox/public/sharing/learning.org")
  (my/defshortcut ?q "~/personal/questions.org")
#+END_SRC

** move to the beginning of the line

#+BEGIN_SRC emacs-lisp
  (defun my/smarter-move-beginning-of-line (arg)
    "Move point back to indentation of beginning of line.

  Move point to the first non-whitespace character on this line.
  If point is already there, move to the beginning of the line.
  Effectively toggle between the first non-whitespace character and
  the beginning of the line.

  If ARG is not nil or 1, move forward ARG - 1 lines first.  If
  point reaches the beginning or end of the buffer, stop there."
    (interactive "^p")
    (setq arg (or arg 1))

    ;; Move lines first
    (when (/= arg 1)
      (let ((line-move-visual nil))
        (forward-line (1- arg))))

    (let ((orig-point (point)))
      (back-to-indentation)
      (when (= orig-point (point))
        (move-beginning-of-line 1))))

  ;; remap C-a to `smarter-move-beginning-of-line'
  (global-set-key [remap move-beginning-of-line]
                  'my/smarter-move-beginning-of-line)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :load-path "~/.emacs.d/plugin/rainbow-delimiters"
    :config (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
  (use-package smartparens
    :init (require 'smartparens-config)
    :load-path "~/.emacs.d/plugin/smartparens")
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package company
    :load-path
    ("~/.emacs.d/plugin/company-mode"
     "~/.emacs.d/plugin/tern/emacs"
     "~/.emacs.d/plugin/tern/bin")
    :commands company-mode
    :init
    (company-mode t)
    :config
    (add-hook 'after-init-hook 'global-company-mode)
    (use-package company-tern
      :load-path "~/.emacs.d/plugin/company-tern"
      :init
      (add-to-list 'company-backends 'company-tern)
      (add-hook 'js-mode-hook 'tern-mode))
    (setq company-idle-delay .3)
    (global-set-key (kbd "C-c /") 'company-files)
    (setq company-tooltip-limit 20)
    (setq company-tooltip-align-annotations 't))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package elfeed
    :load-path ("~/.emacs.d/plugin/elfeed")
    :init (setf url-queue-timeout 40)
    :config
    (use-package feed-setup :load-path "~/.emacs.d/lisp")
    (setf bookmark-default-file (locate-user-emacs-file "local/bookmarks"))
    :bind ("C-x w" . elfeed))

    (add-hook 'elfeed-new-entry-hook
              (elfeed-make-tagger :feed-url "http://feeds.feedburner.com/meiobi"
                                  :entry-title '("Cavaleiros do Zodíaco")
                                  :add 'junk
                                  :remove 'unread))
#+END_SRC

#+BEGIN_SRC emacs-lisp
    (use-package twittering-mode
      :load-path "~/.emacs.d/plugin/twittering-mode"
      :config
      (setq twittering-use-master-password t)
      (setq twittering-icon-mode t)
      (setq twittering-cert-file "/etc/ssl/certs/ca-certificates.crt")
      (setq twittering-icon-storage-file "~/.local/share/emacs/twittering-mode/icons.gz"))
#+END_SRC

** FIXME to code comments
#+BEGIN_SRC emacs-lisp
  (use-package fic-mode
    :load-path "~/.emacs.d/plugin/fic-mode/"
    :config (add-hook 'prog-mode-hook 'fic-mode))

#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :load-path "~/.emacs.d/plugin/projectile"
    :diminish projectile-mode
    :commands projectile-global-mode
    :defer 5
    :bind-keymap ("C-c p" . projectile-command-map)
    :config
    (projectile-global-mode))

#+END_SRC

** Mail
#+BEGIN_SRC emacs-lisp
  (autoload 'notmuch "notmuch" "notmuch mail" t)
#+END_SRC
