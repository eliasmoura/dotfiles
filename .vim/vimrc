" An example for a vimrc file.
"
" Maintainer:	Bram Moolenaar <Bram@vim.org>
" Last change:	2014 Feb 05
"
" To use it, copy it to
"     for Unix and OS/2:  ~/.vimrc
"	      for Amiga:  s:.vimrc
"  for MS-DOS and Win32:  $VIM\_vimrc
"	    for OpenVMS:  sys$login:.vimrc

" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
  finish
endif

"auto start NERDTree when no file set
"autocmd StdinReadPre * let s:std_in=1
"autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

if has("vms")
  set nobackup		" do not keep a backup file, use versions instead
else
  set backup		" keep a backup file (restore to previous version)
  set undofile		" keep an undo file (undo changes after closing)
endif
set history=500		" keep 50 lines of command line history
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands
set incsearch		" do incremental searching
set number

" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
" let &guioptions = substitute(&guioptions, "t", "", "g")

" Don't use Ex mode, use Q for formatting
map Q gq

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=n
endif

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
  colorscheme jellybeans
  set background=dark
endif
nnoremap ; :
nnoremap : ;


set rtp+=~/.vim/vim-snippets/snippets
"Vundle
set rtp+=~/.vim/bundle/vundle
"set rtp+=~/.vim/UltiSnips
call vundle#begin()
"Let Vundle manage Vundle
"required
Plugin 'gmarik/vundle'
Plugin 'git://github.com/scrooloose/syntastic'
Plugin 'git://github.com/kien/ctrlp.vim'
"Plugin 'git://github.com/LoKaltog/vim-easymotion'
Plugin 'tpope/vim-surround'
Plugin 'https://github.com/tpope/vim-repeat.git'
Plugin 'https://github.com/tpope/vim-fugitive.git'
Plugin 'https://github.com/tpope/vim-commentary.git'
Plugin 'plasticboy/vim-markdown'
Plugin 'git://github.com/marijnh/tern_for_vim'
"Plugin 'https://github.com/SirVer/ultisnips.git'
Plugin 'https://github.com/Rykka/riv.vim.git'
call vundle#end()
set cursorline

"let g:UltiSnipsExpandTrigger='<tab>'
"let g:UltiSnipsSnippetDirectories='~/.vim/UltiSnips'
"let g:UltiSnipsEnableSnipMate=1

set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
"set listchars=tab:>~,nbsp:_,trail:.   

if &listchars ==# 'eol:$'
    set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+
endif

set list
"exec 'set listchars=tab:\uBB\uBB,trail:\uB7,nbsp:~'
"exec 'set listchars=tab:\uBB\uBB,nsbp:~,trail:\uB7'
    "set list
" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

  augroup END
  autocmd FileType html set omnifunc=htmlcomplete#CompleteTags 
else

  set autoindent		" always set autoindenting on

endif " has("autocmd")

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif

"let g:airline_powerline_fonts = 1

"set rtp+=/usr/lib/python3.4/site-packages/powerline/bindings/vim
"put a $ in the end of the change mode
set cpoptions+=$

set laststatus=2
set noshowmode

"if exists('$TMUX')
"    let &t_SI = '\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\'
"    let &t_EI = '\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\'
"else
"    let &t_SI = '\<Esc>]50;CursorShape=1\x7'
"    let &t_EI = '\<Esc>]50;CursorShape=0\x7'
"endif
"set spell spelllang=en_us

"" Use clang when checking C/C++ syntax.
"let g:syntastic_c_compiler = 'clang'
"let g:syntastic_c_compiler_options = '-std=c11'
"let g:syntastic_c_remove_include_errors = 1
"
"let g:syntastic_cpp_compiler = 'clang++'
"let g:syntastic_cpp_compiler_options = '-std=c++14'
"let g:syntastic_cpp_remove_include_errors = 1
"
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*
"
"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_open = 1
"let g:syntastic_check_on_wq = 0

" Automatically reload vimrc when it's saved "{{{
augroup VimrcSo
  au!
  autocmd BufWritePost $MYVIMRC so $MYVIMRC
augroup END
"}}}

"Riv stuff
let notes = { 'Name': 'Personal Notes', 'path': '~/writings/notes' }
let blog = { 'Name': 'Personal blog', 'path': '~/writings/blog' }
let g:riv_projects = [notes, blog]
